// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/korrel8r/client/pkg/swagger/models"
)

// NewPostGraphsGoalsParams creates a new PostGraphsGoalsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostGraphsGoalsParams() *PostGraphsGoalsParams {
	return &PostGraphsGoalsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostGraphsGoalsParamsWithTimeout creates a new PostGraphsGoalsParams object
// with the ability to set a timeout on a request.
func NewPostGraphsGoalsParamsWithTimeout(timeout time.Duration) *PostGraphsGoalsParams {
	return &PostGraphsGoalsParams{
		timeout: timeout,
	}
}

// NewPostGraphsGoalsParamsWithContext creates a new PostGraphsGoalsParams object
// with the ability to set a context for a request.
func NewPostGraphsGoalsParamsWithContext(ctx context.Context) *PostGraphsGoalsParams {
	return &PostGraphsGoalsParams{
		Context: ctx,
	}
}

// NewPostGraphsGoalsParamsWithHTTPClient creates a new PostGraphsGoalsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostGraphsGoalsParamsWithHTTPClient(client *http.Client) *PostGraphsGoalsParams {
	return &PostGraphsGoalsParams{
		HTTPClient: client,
	}
}

/*
PostGraphsGoalsParams contains all the parameters to send to the API endpoint

	for the post graphs goals operation.

	Typically these are written to a http.Request.
*/
type PostGraphsGoalsParams struct {

	/* Request.

	   search from start to goal classes
	*/
	Request *models.Goals

	/* Rules.

	   include rules in graph edges
	*/
	Rules *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post graphs goals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostGraphsGoalsParams) WithDefaults() *PostGraphsGoalsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post graphs goals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostGraphsGoalsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post graphs goals params
func (o *PostGraphsGoalsParams) WithTimeout(timeout time.Duration) *PostGraphsGoalsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post graphs goals params
func (o *PostGraphsGoalsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post graphs goals params
func (o *PostGraphsGoalsParams) WithContext(ctx context.Context) *PostGraphsGoalsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post graphs goals params
func (o *PostGraphsGoalsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post graphs goals params
func (o *PostGraphsGoalsParams) WithHTTPClient(client *http.Client) *PostGraphsGoalsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post graphs goals params
func (o *PostGraphsGoalsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequest adds the request to the post graphs goals params
func (o *PostGraphsGoalsParams) WithRequest(request *models.Goals) *PostGraphsGoalsParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the post graphs goals params
func (o *PostGraphsGoalsParams) SetRequest(request *models.Goals) {
	o.Request = request
}

// WithRules adds the rules to the post graphs goals params
func (o *PostGraphsGoalsParams) WithRules(rules *bool) *PostGraphsGoalsParams {
	o.SetRules(rules)
	return o
}

// SetRules adds the rules to the post graphs goals params
func (o *PostGraphsGoalsParams) SetRules(rules *bool) {
	o.Rules = rules
}

// WriteToRequest writes these params to a swagger request
func (o *PostGraphsGoalsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if o.Rules != nil {

		// query param rules
		var qrRules bool

		if o.Rules != nil {
			qrRules = *o.Rules
		}
		qRules := swag.FormatBool(qrRules)
		if qRules != "" {

			if err := r.SetQueryParam("rules", qRules); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
