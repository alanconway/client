// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutConfigReader is a Reader for the PutConfig structure.
type PutConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PUT /config] PutConfig", response, response.Code())
	}
}

// NewPutConfigOK creates a PutConfigOK with default headers values
func NewPutConfigOK() *PutConfigOK {
	return &PutConfigOK{}
}

/*
PutConfigOK describes a response with status code 200, with default header values.

OK
*/
type PutConfigOK struct {
}

// IsSuccess returns true when this put config o k response has a 2xx status code
func (o *PutConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put config o k response has a 3xx status code
func (o *PutConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put config o k response has a 4xx status code
func (o *PutConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put config o k response has a 5xx status code
func (o *PutConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put config o k response a status code equal to that given
func (o *PutConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put config o k response
func (o *PutConfigOK) Code() int {
	return 200
}

func (o *PutConfigOK) Error() string {
	return fmt.Sprintf("[PUT /config][%d] putConfigOK", 200)
}

func (o *PutConfigOK) String() string {
	return fmt.Sprintf("[PUT /config][%d] putConfigOK", 200)
}

func (o *PutConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
